from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_user_settings, toggle_notify_alerts, toggle_daily_report
from aiogram import Bot
from datetime import datetime
from aiogram.types import User
from database.db import get_servers
import aiohttp


router = Router()
bot: Bot = None


def get_notification_keyboard(settings):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–∞–≤—à–∏—Ö –Ω–æ–¥–∞—Ö: {'–í–∫–ª üü¢' if settings['notify_alerts'] else '–í—ã–∫–ª üî¥'}",
            callback_data="toggle_alerts"
        )],
        [InlineKeyboardButton(
            text=f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: {'–í–∫–ª üü¢' if settings['daily_report'] else '–í—ã–∫–ª üî¥'}",
            callback_data="toggle_daily"
        )]
    ])

@router.message(F.text == "/notifications")
async def show_notifications(message: Message):
    settings = await get_user_settings(message.from_user.id)
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=get_notification_keyboard(settings))

@router.callback_query(F.data == "toggle_alerts")
async def toggle_alerts(callback: CallbackQuery):
    user: User = callback.from_user
    user_id = user.id
    username = user.username or f"no_username:{user_id}"

    await toggle_notify_alerts(user_id)
    settings = await get_user_settings(user_id)

    if settings["notify_alerts"]:
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞–¥–∞—é—â–∏—Ö –Ω–æ–¥–∞—Ö [FALL ALERTS ON] {user_id} | {username}")
    else:
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞–¥–∞—é—â–∏—Ö –Ω–æ–¥–∞—Ö [FALL ALERTS OFF] {user_id} | {username}")

    # üîÅ –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
    servers = await get_servers(user_id)
    for token, ip, _ in servers:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"http://{ip}/set_alert_mode", json={"enabled": settings["notify_alerts"]}) as resp:
                    await resp.read()
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∂–∏–º alerts_enabled={settings['notify_alerts']} –Ω–∞ {ip}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ {ip}: {e}")

    await callback.message.edit_reply_markup(reply_markup=get_notification_keyboard(settings))
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ.")



@router.callback_query(F.data == "toggle_daily")
async def toggle_daily(callback: CallbackQuery):
    user: User = callback.from_user
    user_id = user.id
    username = user.username or f"no_username:{user_id}"

    await toggle_daily_report(user_id)
    settings = await get_user_settings(user_id)

    if settings["daily_report"]:
        hour = datetime.now().hour
        from database.db import update_report_hour
        await update_report_hour(user_id, hour)
        print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç [DAILY ON] {user_id} | {username} | hour={hour}")
    else:
        print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç [DAILY OFF] {user_id} | {username}")

    await callback.message.edit_reply_markup(reply_markup=get_notification_keyboard(settings))
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ.")

async def send_alert_mode_to_agent(ip: str, token: str, alerts_enabled: bool):
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://{ip}/set_alert_mode"  # IP —É–∂–µ —Å –ø–æ—Ä—Ç–æ–º 8844
            payload = {
                "token": token,
                "enabled": alerts_enabled
            }
            async with session.post(url, json=payload) as resp:
                if resp.status == 200:
                    print(f"‚úÖ Alert mode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∞–≥–µ–Ω—Ç–µ {ip}: {alerts_enabled}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ alert mode –Ω–∞ –∞–≥–µ–Ω—Ç–µ {ip}: —Å—Ç–∞—Ç—É—Å {resp.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≥–µ–Ω—Ç {ip}: {e}")
