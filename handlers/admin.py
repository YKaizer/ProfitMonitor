from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from fsm.states import BroadcastState
from database.db import (
    get_all_users,
    get_user_count,
    get_server_count,
)
from utils.backup import BACKUP_DIR
from aiogram.types import FSInputFile
import os

router = Router()
bot: Bot = None

ADMIN_ID = 422955762

@router.message(Command("send_mes"))
async def send_mes(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_mes <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    text = parts[1]
    await state.set_state(BroadcastState.waiting_for_confirm)
    await state.set_data({"text": text})
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")],
        ]
    )
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n{text}", reply_markup=keyboard)


@router.callback_query(F.data == "broadcast_confirm")
async def broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    data = await state.get_data()
    text = data.get("text")
    await state.clear()
    await callback.message.edit_text("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞...")
    users = await get_all_users()
    count = 0
    for uid in users:
        try:
            await bot.send_message(uid, text)
            count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    await callback.message.edit_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.callback_query(F.data == "broadcast_cancel")
async def broadcast_cancel(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.message(Command("get_backup"))
async def get_backup_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    files = [f for f in os.listdir(BACKUP_DIR) if f.startswith("bot_data_")]
    if not files:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤.")
        return

    latest = sorted(files)[-1]
    path = os.path.join(BACKUP_DIR, latest)
    await message.answer_document(FSInputFile(path))


@router.message(Command("get_info"))
async def get_info_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    users = await get_user_count()
    servers = await get_server_count()
    text = (
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {users}\n"
        f"üñ•Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {servers}"
    )
    await message.answer(text)
